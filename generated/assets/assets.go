// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 29, 20, 15, 5, 568590081, time.UTC),
		},
		"/.gitignore": &vfsgen۰FileInfo{
			name:    ".gitignore",
			modTime: time.Date(2020, 3, 29, 4, 6, 8, 223898499, time.UTC),
			content: []byte("\x7b\x7b\x70\x72\x6f\x6a\x65\x63\x74\x7d\x7d"),
		},
		"/Makefile": &vfsgen۰CompressedFileInfo{
			name:             "Makefile",
			modTime:          time.Date(2020, 3, 29, 19, 46, 29, 142726484, time.UTC),
			uncompressedSize: 812,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x30\x10\x3c\x7b\xbf\x62\x0f\x2e\x60\xa1\x25\x79\x17\xe0\x43\xd3\xa4\x4e\x80\xd6\x2a\x1c\x1b\x45\x4f\x06\x2d\xae\x25\x36\xe2\x03\x14\xe5\x34\x10\xfc\xef\x85\x5e\xb5\x9b\x16\xb9\x08\xe0\xcc\xec\xee\xcc\xae\xd6\xd9\x77\x5c\xe2\x7c\x51\x97\x54\x55\xa8\x64\x24\x7c\xff\xae\x4e\x00\x56\xd9\xa7\xaf\xb7\xcb\xc2\xc1\x2a\xbb\xd9\x3d\x7c\xb9\x5d\xce\x17\x3d\x94\xe0\xa1\xd1\x95\x42\x66\x9c\xc2\x13\x59\xe5\x02\xac\xb2\xed\xdd\xe3\xf6\xa2\x88\x54\xc7\x57\x82\xcd\x6e\x7d\xe1\x43\x63\xd1\x48\x6d\x79\xe1\x60\x7b\xbf\x79\xf8\xbc\xdd\x77\xc3\x62\x19\xf4\x31\x4e\xc8\x2a\xdb\xdf\x7c\x7c\xbc\xeb\x99\xf9\xe2\x22\x4b\x90\xb9\x26\xe2\x20\x16\xc8\x58\x41\x16\x0b\x97\x0e\xc0\x5e\x1b\xef\x42\x5c\x16\x3a\x96\xcd\x81\xe7\xce\x08\xe9\x65\x5e\x92\x18\x0b\x2a\x7d\x10\x85\x1b\x5f\x1f\xbc\xcc\x9f\x64\x41\x7b\x1f\xe8\xa8\x7f\x2d\xdb\x76\x04\xce\xe7\x49\x0f\x00\xfc\xdb\x7d\xb6\xfe\x91\x8e\xc1\xfb\x2f\xf3\xc1\xa9\x21\x67\x17\x66\x74\x0e\xd0\x93\xe9\xf4\x9e\x15\x0e\xaf\xb6\x30\xeb\x16\xd0\x2f\x33\x41\x2e\x72\xa3\x44\xdb\xfa\xe0\x7e\x52\x1e\xcf\x67\x80\xbc\x22\x69\x53\x98\x05\x83\xec\x88\xd7\x54\x0f\x85\xe3\x94\xb9\x6d\xdd\xb3\xa5\xd0\xd5\x5c\xcc\xa4\x7f\xb5\x67\x31\x68\xe3\x65\x2c\x91\x39\x14\xbd\x4a\xd4\x14\x4e\x3a\x27\xe4\x00\x9d\xf1\x31\xcf\x50\xd6\xdd\xaf\x33\xc5\x39\x07\x08\x8d\x1d\xbb\x6d\x76\xeb\x04\x99\xa2\x43\x53\x20\xcb\x9d\x3d\xea\x02\x15\x9d\xf8\x8b\x34\x15\xc0\x60\x27\x85\x99\x79\x52\x3a\x20\xf3\x7f\x72\xe7\x4d\xa8\xba\xc9\x5a\x55\xe2\x20\x6b\xf2\x95\x8c\xc4\x07\x16\xcb\x18\x7d\x9d\x0a\x11\xe4\x33\x1f\xce\xd4\xd4\x14\x72\x67\x23\xd9\xd8\x5f\x2c\x90\x52\x3a\x5e\x55\xfa\x17\x61\x64\x1d\x29\x5c\xb0\xe9\x3e\xaf\xdb\x77\xc6\xff\xfd\x83\x92\xff\x5a\x79\x4b\x7b\xb5\xff\x49\xfd\x3b\x00\x00\xff\xff\x0e\xfd\xae\x91\x2c\x03\x00\x00"),
		},
		"/cmd": &vfsgen۰DirInfo{
			name:    "cmd",
			modTime: time.Date(2020, 3, 29, 4, 6, 49, 847910528, time.UTC),
		},
		"/cmd/{{project}}": &vfsgen۰DirInfo{
			name:    "{{project}}",
			modTime: time.Date(2020, 3, 29, 5, 13, 26, 471579238, time.UTC),
		},
		"/cmd/{{project}}/main.go": &vfsgen۰CompressedFileInfo{
			name:             "main.go",
			modTime:          time.Date(2020, 3, 29, 20, 42, 17, 527770045, time.UTC),
			uncompressedSize: 292,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4e\x03\x31\x0c\x44\xcf\xf1\x57\x44\x39\x25\x97\xcd\x1d\x89\x0b\x1f\x80\x90\xca\x0f\x84\xc8\xbb\x4d\xdb\xdd\x44\x8e\xdb\x22\x2c\xff\x3b\xa2\x0d\x08\x21\x6e\x23\xfb\xcd\x8c\xa6\xa5\x7c\x4c\x0b\xda\x35\x95\x0d\xa0\xac\xad\x12\x5b\x0f\xc6\x2d\x85\xf7\xe7\xb7\x29\xd7\x35\xce\xe5\xe3\x3d\x1e\x12\x5d\x4a\x8f\xed\xb8\x0c\xe9\xc0\x38\x91\xe1\x57\x8d\xbc\xa7\x32\x73\x14\xa9\xd7\x0d\x49\x35\x8a\x34\xaa\x07\xcc\xac\xfa\x97\xed\x48\x97\x92\xd1\x41\x00\x98\xcf\x5b\xbe\xd5\xfb\x60\x05\xcc\x78\xd9\x87\x47\x3b\xe4\xf4\x8c\x57\x91\x7c\x4a\xbd\xab\xee\xee\x37\x1f\xc0\x34\xaa\x19\x7b\xaf\xf4\xc5\xfe\x2a\xfb\x8f\x7f\xf9\x66\xfd\x08\x0d\x60\xee\x33\xa6\x1d\x27\xe2\xa7\xd4\xb1\x9d\x12\xe3\xeb\x6d\x85\xff\xc9\x0e\xa0\xf0\x19\x00\x00\xff\xff\x28\x9a\xfe\xd9\x24\x01\x00\x00"),
		},
		"/cmd/{{project}}/main_test.go": &vfsgen۰FileInfo{
			name:    "main_test.go",
			modTime: time.Date(2020, 3, 29, 5, 13, 26, 471000000, time.UTC),
			content: []byte("\x70\x61\x63\x6b\x61\x67\x65\x20\x6d\x61\x69\x6e\x0a\x0a\x69\x6d\x70\x6f\x72\x74\x20\x22\x74\x65\x73\x74\x69\x6e\x67\x22\x0a\x0a\x66\x75\x6e\x63\x20\x54\x65\x73\x74\x53\x75\x6d\x28\x74\x20\x2a\x74\x65\x73\x74\x69\x6e\x67\x2e\x54\x29\x20\x7b\x0a\x09\x74\x2e\x4c\x6f\x67\x28\x22\x59\x61\x79\x21\x22\x29\x0a\x7d\x0a"),
		},
		"/go.mod": &vfsgen۰FileInfo{
			name:    "go.mod",
			modTime: time.Date(2020, 3, 29, 18, 10, 11, 258076500, time.UTC),
			content: []byte("\x6d\x6f\x64\x75\x6c\x65\x20\x7b\x7b\x70\x61\x63\x6b\x61\x67\x65\x7d\x7d\x0a\x0a\x67\x6f\x20\x31\x2e\x31\x34\x0a"),
		},
		"/idl": &vfsgen۰DirInfo{
			name:    "idl",
			modTime: time.Date(2020, 3, 29, 5, 22, 49, 442342081, time.UTC),
		},
		"/idl/{{project}}.thrift": &vfsgen۰CompressedFileInfo{
			name:             "{{project}}.thrift",
			modTime:          time.Date(2020, 3, 29, 20, 22, 9, 200459457, time.UTC),
			uncompressedSize: 291,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\x03\x51\x10\x84\xf7\x7d\x8a\x22\xab\x04\x24\xe0\xd6\xec\x04\x2f\xa0\x27\x78\x76\xca\xcc\xc8\xf8\xde\xf8\xba\xc7\x08\x4d\xdf\x5d\x18\x0d\xfe\x80\xab\x6e\xaa\x3e\xa8\xaf\x96\x17\xda\x5c\x94\x38\x35\x44\xb4\x73\x65\xcf\xdc\x47\xcc\xbd\x3d\x53\x3d\x53\x64\xac\x3a\x2d\x47\x62\xf3\x58\x8c\xf3\x54\x9c\x7b\x1f\xfa\xf8\xe4\x1b\x11\xf3\xbe\xa8\xe3\x4e\x87\x76\xcf\xd7\x85\xe6\x08\x08\x70\x7d\x03\xf3\x3e\xd6\x13\xb4\x55\x67\xf5\x83\x24\xfe\xe0\x36\xb7\x6a\xfc\x9f\x17\x31\xf6\xb7\x51\x89\x08\x9d\x8a\x59\xe6\xc3\x57\xc0\x77\x67\x3d\x1a\xbe\x8d\x6e\x2f\xdf\x05\x09\x01\xf0\x7b\x89\x3a\xb4\xed\x1a\xaf\x83\x3f\xa5\xfb\xe7\xbd\x5a\xdb\x1d\x7c\xe8\xed\x6c\xd8\xee\x0e\x92\x1f\x01\x00\x00\xff\xff\x9c\xc1\xa2\x36\x23\x01\x00\x00"),
		},
		"/service": &vfsgen۰DirInfo{
			name:    "service",
			modTime: time.Date(2020, 3, 29, 20, 15, 16, 470517511, time.UTC),
		},
		"/service/service.go": &vfsgen۰CompressedFileInfo{
			name:             "service.go",
			modTime:          time.Date(2020, 3, 29, 20, 44, 59, 108279320, time.UTC),
			uncompressedSize: 497,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xcb\x6a\xc3\x40\x0c\x45\xd7\x9d\xaf\x10\x5e\x14\x3b\x04\x7b\xdf\x6d\x29\x34\x9b\x2e\xda\x2f\x70\x85\x62\xbb\x75\x66\xa6\x1a\x39\x0f\x84\xfe\xbd\xf8\x11\x08\xc1\xa5\x8b\x61\xe0\xea\x48\xf7\xc4\x1a\xbf\xeb\x86\x20\x11\x1f\x3b\x24\xe7\xba\x43\x0c\x2c\xd0\x90\x87\x4c\x75\x19\x9b\x55\xd2\x72\xb7\x97\x4a\x35\x9c\x3c\xb1\x59\xa5\x1a\x39\x7c\x11\x8a\x59\x76\xdd\xca\x30\x78\xa1\xb3\x64\xce\xed\x07\x8f\xf0\x46\x27\x55\xec\xeb\x94\xcc\x3e\xe6\x86\xbc\x80\xcd\x7d\xb6\x3b\xc4\x1e\xd4\x3d\x30\xc9\xc0\x1e\x1e\xd7\xe6\x6a\xce\x9c\x93\x4b\x24\x58\x5d\x4f\xc2\x03\x0a\xe8\x48\x4d\xdd\x79\x3a\xe2\x2a\x5a\xc0\x0b\xb6\x21\x47\x39\xc3\xa2\x5b\x3e\xcf\xff\x16\x98\x7e\x06\x4a\x02\x9b\x86\x7c\x39\x62\xef\x73\x50\x40\xce\xb7\x61\x8a\xc1\x27\xda\x02\x31\x8f\x2f\x70\x71\xeb\x7f\xcf\xe9\x74\xdf\xcb\xd3\xf5\x7e\xb9\x04\xb6\x05\xdf\xf5\xa3\xf2\xbf\xce\xbb\xf4\x4a\x75\x2f\xed\x65\x4d\x7c\xd2\xfb\x0c\xa1\xff\xc3\x48\x78\xa0\xa5\xea\x37\x00\x00\xff\xff\xac\x0e\x9c\xf2\xf1\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.gitignore"].(os.FileInfo),
		fs["/Makefile"].(os.FileInfo),
		fs["/cmd"].(os.FileInfo),
		fs["/go.mod"].(os.FileInfo),
		fs["/idl"].(os.FileInfo),
		fs["/service"].(os.FileInfo),
	}
	fs["/cmd"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cmd/{{project}}"].(os.FileInfo),
	}
	fs["/cmd/{{project}}"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cmd/{{project}}/main.go"].(os.FileInfo),
		fs["/cmd/{{project}}/main_test.go"].(os.FileInfo),
	}
	fs["/idl"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/idl/{{project}}.thrift"].(os.FileInfo),
	}
	fs["/service"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/service/service.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
