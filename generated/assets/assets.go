// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 29, 4, 6, 49, 847825719, time.UTC),
		},
		"/.gitignore": &vfsgen۰FileInfo{
			name:    ".gitignore",
			modTime: time.Date(2020, 3, 29, 4, 6, 8, 223898499, time.UTC),
			content: []byte("\x7b\x7b\x70\x72\x6f\x6a\x65\x63\x74\x7d\x7d"),
		},
		"/Makefile": &vfsgen۰FileInfo{
			name:    "Makefile",
			modTime: time.Date(2020, 3, 29, 4, 13, 4, 780280840, time.UTC),
			content: []byte("\x4e\x4f\x57\x20\x3d\x20\x24\x28\x73\x68\x65\x6c\x6c\x20\x64\x61\x74\x65\x20\x2b\x25\x73\x29\x0a\x0a\x64\x65\x66\x61\x75\x6c\x74\x3a\x0a\x09\x67\x6f\x20\x62\x75\x69\x6c\x64\x20\x2e\x2f\x2e\x2e\x2e\x0a\x09\x0a\x74\x65\x73\x74\x3a\x20\x64\x65\x66\x61\x75\x6c\x74\x0a\x09\x67\x6f\x20\x74\x65\x73\x74\x20\x2e\x2f\x2e\x2e\x2e\x0a\x09\x0a\x63\x6c\x65\x61\x6e\x3a\x0a\x09\x72\x6d\x20\x2d\x66\x20\x7b\x7b\x70\x72\x6f\x6a\x65\x63\x74\x7d\x7d"),
		},
		"/cmd": &vfsgen۰DirInfo{
			name:    "cmd",
			modTime: time.Date(2020, 3, 29, 4, 6, 49, 847910528, time.UTC),
		},
		"/cmd/{{project}}": &vfsgen۰DirInfo{
			name:    "{{project}}",
			modTime: time.Date(2020, 3, 29, 5, 13, 26, 471579238, time.UTC),
		},
		"/cmd/{{project}}/main.go": &vfsgen۰FileInfo{
			name:    "main.go",
			modTime: time.Date(2020, 3, 29, 5, 12, 15, 94413037, time.UTC),
			content: []byte("\x70\x61\x63\x6b\x61\x67\x65\x20\x6d\x61\x69\x6e\x0a\x0a\x69\x6d\x70\x6f\x72\x74\x20\x22\x66\x6d\x74\x22\x0a\x0a\x66\x75\x6e\x63\x20\x6d\x61\x69\x6e\x28\x29\x20\x7b\x0a\x09\x66\x6d\x74\x2e\x50\x72\x69\x6e\x74\x6c\x6e\x28\x22\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x22\x29\x0a\x7d\x0a"),
		},
		"/cmd/{{project}}/main_test.go": &vfsgen۰FileInfo{
			name:    "main_test.go",
			modTime: time.Date(2020, 3, 29, 5, 13, 26, 471000000, time.UTC),
			content: []byte("\x70\x61\x63\x6b\x61\x67\x65\x20\x6d\x61\x69\x6e\x0a\x0a\x69\x6d\x70\x6f\x72\x74\x20\x22\x74\x65\x73\x74\x69\x6e\x67\x22\x0a\x0a\x66\x75\x6e\x63\x20\x54\x65\x73\x74\x53\x75\x6d\x28\x74\x20\x2a\x74\x65\x73\x74\x69\x6e\x67\x2e\x54\x29\x20\x7b\x0a\x09\x74\x2e\x4c\x6f\x67\x28\x22\x59\x61\x79\x21\x22\x29\x0a\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.gitignore"].(os.FileInfo),
		fs["/Makefile"].(os.FileInfo),
		fs["/cmd"].(os.FileInfo),
	}
	fs["/cmd"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cmd/{{project}}"].(os.FileInfo),
	}
	fs["/cmd/{{project}}"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/cmd/{{project}}/main.go"].(os.FileInfo),
		fs["/cmd/{{project}}/main_test.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// We already imported "compress/gzip" and "io/ioutil", but ended up not using them. Avoid unused import error.
var _ = gzip.Reader{}
var _ = ioutil.Discard

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
